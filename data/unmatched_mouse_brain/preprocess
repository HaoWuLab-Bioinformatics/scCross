import numpy as np
import pandas as pd
import scipy.io
import anndata
import scanpy as sc



X = scipy.io.mmread("../download/Saunders-2018/F_GRCm38.81.P60Cortex_noRep5_FRONTALonly.raw.dge.mtx.gz").T.tocsr()



obs_names = pd.read_table(
    "../download/Saunders-2018/F_GRCm38.81.P60Cortex_noRep5_FRONTALonly.raw.dge.colnames",
    header=None
).to_numpy().ravel()
var_names = pd.read_table(
    "../download/Saunders-2018/F_GRCm38.81.P60Cortex_noRep5_FRONTALonly.raw.dge.rownames",
    header=None
).to_numpy().ravel()



obs = pd.read_csv(
    "../download/Saunders-2018/F_GRCm38.81.P60Cortex_noRep5_FRONTALonly.cell_cluster_outcomes.csv",
    index_col=0
).loc[obs_names, :]



adata = anndata.AnnData(X=X, obs=obs, var=pd.DataFrame(index=var_names))
adata.obs.index.name, adata.var.index.name = "cells", "genes"


fc_neuron_annotation = pd.read_excel(
    "../download/Saunders-2018/annotation.BrainCellAtlas_Saunders_version_2018.04.01.xlsx",
    engine="openpyxl"
).query("tissue == 'FC' & `class` == 'NEURON'")
fc_neuron_annotation.head(n=2)


subclusters = set(adata.obs["subcluster"])
subcluster_annotation_map = {
    subcluster: common_name for subcluster, common_name in
    zip(fc_neuron_annotation["subcluster"], fc_neuron_annotation["common_name"])
    if subcluster in subclusters
}



broad_annotation_map = subcluster_annotation_map.copy()
for key, val in broad_annotation_map.items():
    if key.startswith("1-"):
        broad_annotation_map[key] = "CGE"
    elif key.startswith("2-"):
        broad_annotation_map[key] = "MGE"
    elif key.startswith("3-"):
        broad_annotation_map[key] = "Layer6"
    elif key.startswith("4-"):
        broad_annotation_map[key] = "Layer5b"
    elif key.startswith("5-"):
        broad_annotation_map[key] = "Claustrum"
    elif key in ("6-1", "6-2"):
        broad_annotation_map[key] = "Layer2/3"
    elif key.startswith("6-"):
        broad_annotation_map[key] = "Layer5a"
    elif key.startswith("7-"):
        broad_annotation_map[key] = "Layer5"
    else:  # including 11-2
        broad_annotation_map[key] = np.nan


adata.obs["cell_type"] = [
    broad_annotation_map[subcluster]
    if subcluster in broad_annotation_map else np.nan
    for subcluster in adata.obs["subcluster"]
]
adata.obs["cell_subtype"] = [
    subcluster_annotation_map[subcluster]
    if subcluster in subcluster_annotation_map else np.nan
    for subcluster in adata.obs["subcluster"]
]
adata.obs["domain"] = "scRNA-seq"
adata.obs["protocol"] = "Drop-seq"
adata.obs["dataset"] = "Saunders-2018"
adata.obs.head(n=2)





retained_cells = adata.obs.dropna(subset=["cell_type", "cell_subtype"]).index
adata = adata[retained_cells, :]


retained_genes = adata.var.dropna(subset=["chrom", "chromStart", "chromEnd"]).index
adata = adata[:, retained_genes]
adata.var = adata.var.astype({"chromStart": int, "chromEnd": int})

sc.pp.filter_genes(adata, min_counts=1)


sc.pp.highly_variable_genes(adata, n_top_genes=2000, flavor="seurat_v3")
adata.var.highly_variable.sum()

adata.write_h5ad("rna_preprocessed.h5ad", compression="gzip")




adata = sc.read_10x_h5("../download/10x-ATAC-Brain5k/atac_v1_adult_brain_fresh_5k_filtered_peak_bc_matrix.h5", gex_only=False)
adata.obs.index.name, adata.var.index.name = "cells", "peaks"


obs_meta = pd.read_csv(
    "../download/10x-ATAC-Brain5k/signac_idents.csv", index_col=0
).rename(
    columns={"Idents": "cell_type"}
).query(
    "cell_type not in ['Astro', 'Endo', 'Macrophage', 'Oligo', 'Meis2', 'VLMC']"
)


adata.obs = adata.obs.join(obs_meta)
adata.obs["domain"] = "scATAC-seq"
adata.obs["protocol"] = "10x ATAC"
adata.obs["dataset"] = "10x-ATAC-Brain5k"
adata.obs.head()



adata.var["chrom"] = np.vectorize(lambda x: x.split(":")[0])(adata.var["gene_ids"])
adata.var["chromStart"] = np.vectorize(lambda x: int(x.split(":")[1].split("-")[0]))(adata.var["gene_ids"])
adata.var["chromEnd"] = np.vectorize(lambda x: int(x.split("-")[1]))(adata.var["gene_ids"])
del adata.var["gene_ids"]
adata.var.head()


retained_cells = adata.obs.dropna().index
adata = adata[retained_cells, :]


sc.pp.filter_genes(adata, min_counts=1)


adata.write_h5ad("atac_preprocessed.h5ad", compression="gzip")


melted_df = pd.read_table("../download/Luo-2017/data/gene_level_mouse.txt.gz").dropna()
obs_names = pd.Index(set(melted_df["samp"]))
var_names = pd.Index(set(melted_df["geneID"]))



ridx = obs_names.get_indexer(melted_df["samp"])
cidx = var_names.get_indexer(melted_df["geneID"])
mCH = scipy.sparse.csr_matrix(
    (melted_df["mCH"], (ridx, cidx))
).astype(np.float32).toarray()
mCH_norm = scipy.sparse.csr_matrix(
    (melted_df["mCH_norm"], (ridx, cidx))
).astype(np.float32).toarray()



mCG = pd.read_table(
    "../download/Luo-2017/data/mCG_genebody_mouse.txt.gz",
    index_col=0, dtype={"chr": str}
).drop(columns=["name", "chr", "start", "end", "strand"])



mCG_mc = mCG.loc[var_names, obs_names + "_mc"].to_numpy().T.astype(np.float32)
mCG_c = mCG.loc[var_names, obs_names + "_c"].to_numpy().T.astype(np.float32)
mCG = mCG_mc / mCG_c
mCG[np.isnan(mCG)] = 0.0



mCG_global = mCG_mc.sum(axis=1, keepdims=True) / mCG_c.sum(axis=1, keepdims=True)
mCG_norm = mCG / mCG_global


used_obs_names = [
    obs_name for obs_name in obs_names
    if obs_name.startswith("Pool_") or obs_name.startswith("nuclei")
]
used_ridx = obs_names.get_indexer(used_obs_names)
mCH = mCH[used_ridx, :]
mCH_norm = mCH_norm[used_ridx, :]
mCG = mCG[used_ridx, :]
mCG_norm = mCG_norm[used_ridx, :]



X = np.concatenate([mCH, mCG], axis=1)
X_norm = np.concatenate([mCH_norm, mCG_norm], axis=1)

obs = pd.read_csv("../download/Luo-2017/gene_level_mouse_meta.csv", index_col=0)
obs = obs.loc[used_obs_names, :]
obs.head()



var = melted_df.loc[:, ["geneID", "geneName"]].drop_duplicates()
var = var.set_index("geneID").loc[var_names.tolist(), :].reset_index().set_index("geneName")
var.set_index(anndata.utils.make_index_unique(var.index), inplace=True)
var = pd.concat([var.set_index(var.index + "_mCH"), var.set_index(var.index + "_mCG")])
var.head()


adata = anndata.AnnData(X=X, obs=obs, var=var, layers={"norm": X_norm})
adata.obs.index.name, adata.var.index.name = "cells", "genes"



adata.obs["domain"] = "snmC-seq"
adata.obs["protocol"] = "snmC-seq"
adata.obs["dataset"] = "Luo-2017"



retained_genes = adata.var.dropna(subset=["chrom", "chromStart", "chromEnd"]).index
adata = adata[:, retained_genes]
adata.var = adata.var.astype({"chromStart": int, "chromEnd": int})


retained_genes = adata.var_names[adata.X.sum(axis=0) != 0]
adata = adata[:, retained_genes].copy()


adata.write_h5ad("snm_preprocessed.h5ad", compression="gzip")